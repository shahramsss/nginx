d1 r1
session_01

install nginx
sudo systemctl status nginx.service
sudo  systemctl start nginx.service 
sudo systemctl enable nginx.service
directve
contex = block or section

------------------------------------------------------------
d1 r1
session_02

modules

http

http core modules
nginx -h = help 
sudo nginx -t = test config files
events {} = use events contex is forced
sudo  systemctl restart nginx.service 
sudo  systemctl reload nginx.service 

sample code:
-----------------
# main context

events {}

http {
        server {
                server_name 127.0.0.1;
                listen 81;
                return 200 "hello";
        }
        server { 
                server_name 127.0.0.2;
                listen 81;
                return 200 "hello 127002 this is new page";
        }
}

------------------------------------------------------------
d1 r1
section_03

user 
root
index
location 

location url { 
    configurations ...
}

contex: server , location

root path

/var/log/nginx/error.log

http://127.0.0.1:81/blog.html

location /somepath/ {
    root /var/www/html;
}
http://example.com/somepath/image.jpg
/var/www/html/somepath/image.jpg


    location / {
        # تنظیمات پیش‌فرض برای همه‌ی درخواست‌ها
    }

    location /images/ {
        # برای درخواست‌هایی که با /images/ شروع می‌شوند
    }

    location = /about {
        # فقط برای /about دقیقاً
    }

    location ~ \.php$ {
        # برای فایل‌هایی که پسوند .php دارند (regex)
    }

    location ~* \.(jpg|jpeg|png|gif|ico)$ {
        # بدون حساسیت به حروف بزرگ/کوچک (jpg/JPG و ...)
    }

sample code:
-----------------
user sss;

events {}

http {
        server {
                server_name 127.0.0.1;
                listen 81;
                root /home/sss/Desktop/nginx/blog;
                index blog.html;

                location /docs {
                        index doc.html;
                }
        }       
}

------------------------------------------------------------
d1 r1
session_04

logging
access log
error log 

Syntax:	error_log file [level];
Default: error_log logs/error.log error;
Context: main, http, mail, stream, server, location

/var/log/nginx/

change format
Alphabetical index of variable

Syntax:	log_format name [escape=default|json|none] string ...;
Default: log_format combined "...";
Context: http

sample code:
-----------------
user sss;

error_log /var/log/nginx/error.log warn;

events {}

http {

        log_format main '$remote_addr $remote_user $time_local $request '
                        '$status $body_byte_sent $http_user_agent';
        server {
                server_name 127.0.0.1;
                listen 81;
                root /home/sss/Desktop/nginx/blog;
                index blog.html;

                access_log /var/log/nginx/access.log main;

                location /docs {
                        index doc.html;
                        error_log /var/log/nginx/error_docs.log warn;
                        access_log /var/log/nginx/access_docs.log main;
                }
        }       
}
------------------------------------------------------------

session_05

error pages

Syntax:	error_page code ... [=[response]] uri;
Default:	—
Context:	http, server, location, if in location

error_page 404             /404.html;
error_page 500 502 503 504 /50x.html;

Syntax:	internal;
Default:	—
Context:	location


sample code:
-----------------
# main context
user sss;

error_log /var/log/nginx/error.log;

events {}

http {
	server {
		server_name 127.0.0.1;
		listen 81;
		root /home/sss/Desktop/nginx/blog;
		index blog.html;

		error_page 404 =200 /404.html;

		access_log /var/log/nginx/access.log;
			
		location /docs {
			index doc.html;
			error_log /var/log/nginx/error_docs.log;
			access_log /var/log/nginx/access_docs.log;
		}

		location /404.html {
			root /home/sss/Desktop/nginx/blog/errors;
			internal;

		}
	}	
}
------------------------------------------------------------

session_06

Syntax:	worker_processes number | auto;
Default:	
worker_processes 1;
Context:	main

Syntax:	autoindex on | off;
Default:	
autoindex off;
Context:	http, server, location

Syntax:	include file | mask;
Default:	—
Context:	any

cat /etc/nginx/mime.types
include mime.types;
include vhosts/*.conf;

Syntax:	default_type mime-type;
Default:	
default_type text/plain;
Context:	http, server, location

nginx -s <SIGNAL>
where <SIGNAL> can be one of the following:

quit – Shut down gracefully (the SIGQUIT signal)
reload – Reload the configuration file (the SIGHUP signal)
reopen – Reopen log files (the SIGUSR1 signal)
stop – Shut down immediately (or fast shutdown, the SIGTERM signal)


sample code:
-----------------
user sss;

error_log /var/log/nginx/error.log;

events {}

worker_processes auto;

http {
	server {
		server_name 127.0.0.1;
		listen 81;
		root /home/sss/Desktop/nginx/blog;

		error_page 404 =200 /404.html;

		access_log /var/log/nginx/access.log;

		autoindex on;
		index NO_EXSTENT_INDEX;

		include /etc/nginx/mime.types;
		default_type text/plain;
			
		location /docs {
			index doc.html;
			error_log /var/log/nginx/error_docs.log;
			access_log /var/log/nginx/access_docs.log;
		}
		location /404.html {
			root /home/sss/Desktop/nginx/blog/errors;
			internal;

		}
	}	
}

------------------------------------------------------------

section_07

reverse proxy

Module ngx_http_proxy_module

Syntax:	proxy_pass URL;
Default:	—
Context:	location, if in location, limit_except

Syntax:	proxy_set_header field value;
Default: proxy_set_header Host $proxy_host;
         proxy_set_header Connection close;
Context:	http, server, location

ماژول ngx_http_proxy_module امکان ارسال درخواست‌ها به سرور دیگر را فراهم می‌کند.
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;

اگر مقدار فیلد هدر یک رشته خالی باشد، این فیلد به سرور پروکسی ارسال نخواهد شد
proxy_set_header Accept-Encoding "";

sample code:
-----------------
# main context
user sss;
events {}
http {
	server {
		server_name 127.0.0.1;
		listen 81;
		
		location / {
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header Accept-Encoding "";
			proxy_pass http://127.0.0.1:82;
		}
	}	
	
	server {
		server_name 127.0.0.1;
		listen 82;
		
		location / {
			root /home/sss/Desktop/nginx/blog/one;
			index one.html;
		}
	}	
}

------------------------------------------------------------

section_08

load balancer
Module ngx_http_upstream_module

Syntax:	upstream name { ... }
Default:	—
Context:	http

Round Robin 
Least Connections 
IP Hash 
Hash 
Least Time 
Random 

backup
down

helth check
max_fials=<n> fail_timeout=<n>s

sample code:
-----------------
# main context
user sss;
events {}
http {
	upstream backends {
		least_conn;
		# ip_hash;
		server 127.0.0.1:82 weight=1;
		# server 127.0.0.1:83 weight=3 down;
		server 127.0.0.1:83 weight=3 down;
		# server 127.0.0.1:84 weight=2;
		server 127.0.0.1:84 backup;
	}

	server {
		server_name 127.0.0.1;
		listen 81;
		location / {
			proxy_pass http://backends;
		}
	}	

	server {
		server_name 127.0.0.1;
		listen 82;
		root /home/sss/Desktop/nginx/blog/one;
	}	

		server {
		server_name 127.0.0.1;
		listen 83;
		root /home/sss/Desktop/nginx/blog/two;
	}

		server {
		server_name 127.0.0.1;
		listen 84;
		root /home/sss/Desktop/nginx/blog/three;
	}
	
}

------------------------------------------------------------

section_09

limit
bursty trafic
leaky backet

Module ngx_http_limit_conn_module

Syntax:	limit_conn zone number;
Default:	—
Context:	http, server, location

sample code:
-----------------
user sss;
events {}
http {
	limit_conn_zone $binary_remote_addr zone=addr:2m;	
	limit_conn_status 429;

	server {
		server_name 127.0.0.1;
		listen 82;
		root /home/sss/Desktop/nginx/blog/one;
		limit_conn addr 1;
	}	
}
-----------------

Module ngx_http_limit_req_module

Syntax:	limit_req zone=name [burst=number] [nodelay | delay=number];
Default:	—
Context:	http, server, location

sample code:
-----------------
user sss;
events {}
http {
	limit_req_zone $binary_remote_addr zone=addr:2m rate=3r/s;
	limit_conn_status 429;

	server {
		server_name 127.0.0.1;
		listen 82;
		root /home/sss/Desktop/nginx/blog/one;
		limit_req zone=addr burst=5;
		location / {}
	}	
}
-----------------

Syntax:	limit_rate_after size;
Default:	
limit_rate_after 0;
Context:	http, server, location, if in location
This directive appeared in version 0.8.0.

Syntax:	limit_rate rate;
Default:	
limit_rate 0;
Context:	http, server, location, if in location
The rate is specified in bytes per second.

sample code:
-----------------
user sss;
events {}
http {

	server {
		server_name 127.0.0.1;
		listen 82;
		root /home/sss/Desktop/nginx/blog/one;
		limit_rate_after 10m;
		limit_rate 1m;
		location / {}
	}	
}
------------------------------------------------------------

section_10

Module ngx_http_auth_basic_module

Syntax:	auth_basic string | off;
Default:	
auth_basic off;
Context:	http, server, location, limit_except

Syntax:	auth_basic_user_file file;
Default:	—
Context:	http, server, location, limit_except

use hash for password in file
sample hash in terminal: openssl passwd sss

sample code:
-----------------
user sss;
events {}
http {

	server {
		server_name 127.0.0.1;
		listen 82;
		root /home/sss/Desktop/nginx/blog/one;
		auth_basic "home";
		auth_basic_user_file /etc/nginx/conf.d/passwd;
		location / {}
	}	
}
------------------------------------------------------------
