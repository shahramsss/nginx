d1 r1 r2
session_01

install nginx
sudo systemctl status nginx.service
sudo  systemctl start nginx.service 
sudo systemctl enable nginx.service
directve
contex = block or section

------------------------------------------------------------
d1 r1 r2
session_02

modules

http

http core modules
nginx -h = help 
sudo nginx -t = test config files
events {} = use events contex is forced
sudo  systemctl restart nginx.service 
sudo  systemctl reload nginx.service 

sample code:
-----------------
# main context

events {}

http {
        server {
                server_name 127.0.0.1;
                listen 81;
                return 200 "hello";
        }
        server { 
                server_name 127.0.0.2;
                listen 81;
                return 200 "hello 127002 this is new page";
        }
}

------------------------------------------------------------
d1 r1 r2
section_03

user 
root
برای مشخص کردن مسیر ریشه دایرکتوری در فایل‌ سیستم سرور استفاده می‌شود که فایل‌های استاتیک (مثل HTML، CSS، تصاویر و...) از آنجا سرو شوند.

index
location 
وقتی درخواست HTTP به یک مسیر یا الگوی خاص رسید، Nginx چطور باید آن را مدیریت کند

location url { 
    configurations ...
}

contex: server , location

root path

/var/log/nginx/error.log

http://127.0.0.1:81/blog.html

location /somepath/ {
    root /var/www/html;
}
http://example.com/somepath/image.jpg
/var/www/html/somepath/image.jpg


    location / {
        # تنظیمات پیش‌فرض برای همه‌ی درخواست‌ها
    }

    location /images/ {
        # برای درخواست‌هایی که با /images/ شروع می‌شوند
    }

    location = /about {
        # فقط برای /about دقیقاً
    }

    location ~ \.php$ {
        # برای فایل‌هایی که پسوند .php دارند (regex)
    }

    location ~* \.(jpg|jpeg|png|gif|ico)$ {
        # بدون حساسیت به حروف بزرگ/کوچک (jpg/JPG و ...)
    }

sample code:
-----------------
user sss;

events {}

http {
        server {
                server_name 127.0.0.1;
                listen 81;
                root /home/sss/Desktop/nginx/blog;
                index blog.html;

                location /docs {
                        index doc.html;
                }
        }       
}

------------------------------------------------------------
d1 r1 r2  
session_04

logging
access log
error log 

Syntax:	error_log file [level];
Default: error_log logs/error.log error;
Context: main, http, mail, stream, server, location

/var/log/nginx/

change format
Alphabetical index of variable

Syntax:	log_format name [escape=default|json|none] string ...;
Default: log_format combined "...";
Context: http

sample code:
-----------------
user sss;

error_log /var/log/nginx/error.log warn;

events {}

http {

        log_format main '$remote_addr $remote_user $time_local $request '
                        '$status $body_byte_sent $http_user_agent';
        server {
                server_name 127.0.0.1;
                listen 81;
                root /home/sss/Desktop/nginx/blog;
                index blog.html;

                access_log /var/log/nginx/access.log main;

                location /docs {
                        index doc.html;
                        error_log /var/log/nginx/error_docs.log warn;
                        access_log /var/log/nginx/access_docs.log main;
                }
        }       
}
------------------------------------------------------------
d2 r1 
session_05

error pages

Syntax:	error_page code ... [=[response]] uri;
Default:	—
Context:	http, server, location, if in location

error_page 404             /404.html;
error_page 500 502 503 504 /50x.html;

Syntax:	internal;
Default:	—
Context:	location


sample code:
-----------------
# main context
user sss;

error_log /var/log/nginx/error.log;

events {}

http {
	server {
		server_name 127.0.0.1;
		listen 81;
		root /home/sss/Desktop/nginx/blog;
		index blog.html;

		error_page 404 =200 /404.html;

		access_log /var/log/nginx/access.log;
			
		location /docs {
			index doc.html;
			error_log /var/log/nginx/error_docs.log;
			access_log /var/log/nginx/access_docs.log;
		}

		location /404.html {
			root /home/sss/Desktop/nginx/blog/errors;
			internal;

		}
	}	
}
------------------------------------------------------------
d2 r1
session_06

Syntax:	worker_processes number | auto;
Default:	
worker_processes 1;
Context:	main

Syntax:	autoindex on | off;
Default:	
autoindex off;
Context:	http, server, location

Syntax:	include file | mask;
Default:	—
Context:	any

cat /etc/nginx/mime.types
include mime.types;
include vhosts/*.conf;

Syntax:	default_type mime-type;
Default:	
default_type text/plain;
Context:	http, server, location

nginx -s <SIGNAL>
where <SIGNAL> can be one of the following:

quit – Shut down gracefully (the SIGQUIT signal)
reload – Reload the configuration file (the SIGHUP signal)
reopen – Reopen log files (the SIGUSR1 signal)
stop – Shut down immediately (or fast shutdown, the SIGTERM signal)


sample code:
-----------------
user sss;

error_log /var/log/nginx/error.log;

events {}

worker_processes auto;

http {
	server {
		server_name 127.0.0.1;
		listen 81;
		root /home/sss/Desktop/nginx/blog;

		error_page 404 =200 /404.html;

		access_log /var/log/nginx/access.log;

		autoindex on;
		index NO_EXSTENT_INDEX;

		include /etc/nginx/mime.types;
		default_type text/plain;
			
		location /docs {
			index doc.html;
			error_log /var/log/nginx/error_docs.log;
			access_log /var/log/nginx/access_docs.log;
		}
		location /404.html {
			root /home/sss/Desktop/nginx/blog/errors;
			internal;

		}
	}	
}

------------------------------------------------------------
d2 r1
section_07

reverse proxy

Module ngx_http_proxy_module

Syntax:	proxy_pass URL;
Default:	—
Context:	location, if in location, limit_except

Syntax:	proxy_set_header field value;
Default: proxy_set_header Host $proxy_host;
         proxy_set_header Connection close;
Context:	http, server, location

ماژول ngx_http_proxy_module امکان ارسال درخواست‌ها به سرور دیگر را فراهم می‌کند.
proxy_set_header Host $host;
proxy_set_header X-Real-IP $remote_addr;

اگر مقدار فیلد هدر یک رشته خالی باشد، این فیلد به سرور پروکسی ارسال نخواهد شد
proxy_set_header Accept-Encoding "";

sample code:
-----------------
# main context
user sss;
events {}
http {
	server {
		server_name 127.0.0.1;
		listen 81;
		
		location / {
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header Accept-Encoding "";
			proxy_pass http://127.0.0.1:82;
		}
	}	
	
	server {
		server_name 127.0.0.1;
		listen 82;
		
		location / {
			root /home/sss/Desktop/nginx/blog/one;
			index one.html;
		}
	}	
}

------------------------------------------------------------
d2 r1
section_08

load balancer
Module ngx_http_upstream_module

Syntax:	upstream name { ... }
Default:	—
Context:	http

Round Robin 
Least Connections 
IP Hash 
Hash 
Least Time 
Random 

backup
down

helth check
max_fials=<n> fail_timeout=<n>s

sample code:
-----------------
# main context
user sss;
events {}
http {
	upstream backends {
		least_conn;
		# ip_hash;
		server 127.0.0.1:82 weight=1;
		# server 127.0.0.1:83 weight=3 down;
		server 127.0.0.1:83 weight=3 down;
		# server 127.0.0.1:84 weight=2;
		server 127.0.0.1:84 backup;
	}

	server {
		server_name 127.0.0.1;
		listen 81;
		location / {
			proxy_pass http://backends;
		}
	}	

	server {
		server_name 127.0.0.1;
		listen 82;
		root /home/sss/Desktop/nginx/blog/one;
	}	

		server {
		server_name 127.0.0.1;
		listen 83;
		root /home/sss/Desktop/nginx/blog/two;
	}

		server {
		server_name 127.0.0.1;
		listen 84;
		root /home/sss/Desktop/nginx/blog/three;
	}
	
}

------------------------------------------------------------
d2 r1
section_09

limit
bursty trafic
leaky backet

Module ngx_http_limit_conn_module

Syntax:	limit_conn zone number;
Default:	—
Context:	http, server, location

sample code:
-----------------
user sss;
events {}
http {
	limit_conn_zone $binary_remote_addr zone=addr:2m;	
	limit_conn_status 429;

	server {
		server_name 127.0.0.1;
		listen 82;
		root /home/sss/Desktop/nginx/blog/one;
		limit_conn addr 1;
	}	
}
-----------------

Module ngx_http_limit_req_module

Syntax:	limit_req zone=name [burst=number] [nodelay | delay=number];
Default:	—
Context:	http, server, location

sample code:
-----------------
user sss;
events {}
http {
	limit_req_zone $binary_remote_addr zone=addr:2m rate=3r/s;
	limit_conn_status 429;

	server {
		server_name 127.0.0.1;
		listen 82;
		root /home/sss/Desktop/nginx/blog/one;
		limit_req zone=addr burst=5;
		location / {}
	}	
}
-----------------

Syntax:	limit_rate_after size;
Default:	
limit_rate_after 0;
Context:	http, server, location, if in location
This directive appeared in version 0.8.0.

Syntax:	limit_rate rate;
Default:	
limit_rate 0;
Context:	http, server, location, if in location
The rate is specified in bytes per second.

sample code:
-----------------
user sss;
events {}
http {

	server {
		server_name 127.0.0.1;
		listen 82;
		root /home/sss/Desktop/nginx/blog/one;
		limit_rate_after 10m;
		limit_rate 1m;
		location / {}
	}	
}
------------------------------------------------------------
d2 r1
section_10

Module ngx_http_auth_basic_module

Syntax:	auth_basic string | off;
Default:	
auth_basic off;
Context:	http, server, location, limit_except

Syntax:	auth_basic_user_file file;
Default:	—
Context:	http, server, location, limit_except

use hash for password in file
sample hash in terminal: openssl passwd sss
user:password in file

sample code:
-----------------
user sss;
events {}
http {

	server {
		server_name 127.0.0.1;
		listen 82;
		root /home/sss/Desktop/nginx/blog/one;
		auth_basic "home";
		auth_basic_user_file /etc/nginx/conf.d/passwd;
		location / {}
	}	
}

------------------------------------------------------------
d2 r1
section_11

ngx_http_access_module
allow 
deny

Syntax:	allow address | CIDR | unix: | all;
Default:	—
Context:	http, server, location, limit_except

Syntax:	deny address | CIDR | unix: | all;
Default:	—
Context:	http, server, location, limit_except

------------------------------------------------------------
d3 r1
section_12

proxy_cache
proxy_cache_valid
stale

Syntax:	proxy_cache_path path [levels=levels] [use_temp_path=on|off] keys_zone=name:size [inactive=time] [max_size=size] [min_free=size]
 		[manager_files=number] [manager_sleep=time] [manager_threshold=time] [loader_files=number] [loader_sleep=time] 
		[loader_threshold=time] [purger=on|off] [purger_files=number] [purger_sleep=time] [purger_threshold=time];
Default:	—
Context:	http
برای تعریف محل و مشخصات حافظه کش (cache) استفاده می‌شود. این دستور در بلاک http نوشته می‌شود و مشخص می‌کند که:
فایل‌های کش کجا ذخیره شوند،
چه ساختاری داشته باشند،
چه ظرفیتی داشته باشند،
و چه سیاست‌هایی برای حذف و انقضا استفاده شود.

Syntax:	proxy_cache zone | off;
Default:	proxy_cache off;
Context:	http, server, location

Syntax:	proxy_cache_valid [code ...] time;
Default:	—
Context:	http, server, location
Sets caching time for different response codes
proxy_cache_valid 200 302 10m;
proxy_cache_valid 404 1m;
برای تعیین مدت زمان اعتبار کش پاسخ‌های دریافت‌شده از سرور upstream استفاده می‌شود.

$upstream_cache_status
keeps the status of accessing a response cache (0.8.3). The status can be either “MISS”, “BYPASS”, “EXPIRED”, “STALE”, “UPDATING”, “REVALIDATED”, or “HIT”.

Syntax:	proxy_cache_key string;
Default:	proxy_cache_key $scheme$proxy_host$request_uri;
Context:	http, server, location

proxy_cache_key "$host$request_uri $cookie_user";

Syntax:	proxy_cache_bypass string ...;
Default:	—
Context:	http, server, location
می‌تونه یک یا چند متغیر (مثل $cookie_..., $arg_..., $http_...) یا مقادیر ثابت باشه.
اگر حتی یکی از این متغیرها مقدار غیرخالی یا متفاوت از "0" داشته باشه، کش نادیده گرفته می‌شه.

proxy_cache_bypass $http_cache_bypass; => header -> cache_bypass=<number or string and not 0 or empty>
proxy_cache_bypass $arg_shold_bypass_cache; -> in url ?shold_bypass_cache=True
proxy_cache_bypass $cookie_nocache;

Syntax:	proxy_cache_use_stale error | timeout | invalid_header | updating | http_500 | http_502 | http_503 | http_504 | http_403 | http_404 | http_429 | off ...;
Default:	proxy_cache_use_stale off;
Context:	http, server, location
آیا در صورت وقوع خطا، از نسخه کش‌شده (stale) پاسخ استفاده شود یا نه.

Syntax:	proxy_connect_timeout time;
Default:	proxy_connect_timeout 60s;
Context:	http, server, location
 مدت‌زمانی را مشخص می‌کند که Nginx برای برقراری اتصال اولیه با سرور upstream (مثلاً backend یا API) صبر می‌کند.

Syntax:	proxy_cache_lock on | off;
Default:	proxy_cache_lock off;
Context:	http, server, location
This directive appeared in version 1.1.12.
only one request when multi request
 برای جلوگیری از "cache stampede" استفاده می‌شود. این حالت زمانی رخ می‌دهد که چندین درخواست همزمان برای یک منبع کش‌نشده به سرور upstream فرستاده شوند.
 اگر یک URL برای اولین بار درخواست شود و هنوز کش نشده باشد، تمام درخواست‌های همزمان به سرور upstream فرستاده می‌شوند. این فشار زیادی به backend وارد می‌کند.


sample code:
-----------------
# main context
user sss;
events {}
http {

	proxy_cache_path /home/sss/Desktop/cache levels=1:2 keys_zone=mycache:10m inactive=3h max_size=20g;

	upstream backends {
		server 127.0.0.1:82;
		server 127.0.0.1:83;
		server 127.0.0.1:84;
	}


	server {
		server_name 127.0.0.1;
		listen 81;
		location / {
			proxy_pass http://backends;
			proxy_cache mycache;
			proxy_cache_valid any 10m;
			proxy_cache_key "$host$request_uri $cookie_user";
			proxy_cache_bypass $http_cache_bypass;
			proxy_cache_use_stale error timeout http_500 http_503;
			proxy_connect_timeout 30s;
			proxy_cache_lock on ;
			add_header X-Proxy_Cache $upstream_cache_status;
		}
	}	

	server {
		server_name 127.0.0.1;
		listen 82;
		root /home/sss/Desktop/nginx/blog/one;
	}	

		server {
		server_name 127.0.0.1;
		listen 83;
		root /home/sss/Desktop/nginx/blog/two;
	}

		server {
		server_name 127.0.0.1;
		listen 84;
		root /home/sss/Desktop/nginx/blog/three;
	}
	
}



------------------------------------------------------------
d3 r1
section_13

buffering

Syntax:	proxy_buffering on | off;
Default:	proxy_buffering on;
Context:	http, server, location
مشخص می‌کند که آیا پاسخ دریافتی از سرور upstream ابتدا در حافظه (buffer) ذخیره شود یا مستقیماً به کلاینت ارسال شود.

------------------------------------------------------------
d3 r1
section_14

gzip
compresses responses
brotli

Syntax:	gzip on | off;
Default:	gzip off;
Context:	http, server, location, if in location


Syntax:	gzip_comp_level level;
Default:	gzip_comp_level 1;
Context:	http, server, location
Sets a gzip compression level of a response. Acceptable values are in the range from 1 to 9.

Syntax:	gzip_min_length length(byte);
Default:	gzip_min_length 20;
Context:	http, server, location
تعیین می‌کنه حداقل اندازه پاسخ (بر حسب بایت) که Nginx باید فشرده‌اش کنه.

Syntax:	gzip_disable regex ...;
Default:	—
Context:	http, server, location
This directive appeared in version 0.6.23.
دستور gzip_disable به Nginx می‌گه که برای بعضی از کاربرها gzip رو غیرفعال کنه. معمولاً برای مرورگرهای قدیمی یا ناسازگار با gzip استفاده می‌شه، مثل Internet Explorer 6 و پایین‌تر.


Syntax:	gzip_types mime-type ...;
Default:	gzip_types text/html;
Context:	http, server, location
این دستور مشخص می‌کنه کدام نوع محتوا (MIME types) باید توسط Nginx با gzip فشرده بشه.

sample code:
-----------------
# main context
user sss;
events {}
http {
		gzip on;
		gzip_min_length 100;
		gzip_comp_level 4;
		gzip_disable "msie6";
		gzip_types text/plain text/css text/javascript;
		
		upstream backends {
			server 127.0.0.1:82;
		}
		server {
			server_name 127.0.0.1;
			listen 81;
			location / {
				proxy_pass http://backends;

			}
		}	

		server {
			server_name 127.0.0.1;
			listen 82;
			root /home/sss/Desktop/nginx/blog/one;
		}	
	
}


------------------------------------------------------------
d3 r1
section_15

Syntax:	keepalive_min_timeout timeout;
Default:	keepalive_min_timeout 0;
Context:	http, server, location
This directive appeared in version 1.27.4.
برای نگه داشتن اتصال بین Nginx و کلاینت یا بک‌اند (مثل upstream servers) استفاده می‌کنید.

Syntax:	keepalive_requests number;
Default:	keepalive_requests 1000;
Context:	http, server, location
This directive appeared in version 0.8.0.
چند درخواست می‌تونن به صورت پشت‌سر‌هم ارسال بشن قبل از اینکه اتصال بسته بشه.

Syntax:	keepalive_disable none | browser ...;
Default:	
keepalive_disable msie6;
Context:	http, server, location
تعیین می‌کند که برای کدام مرورگرها قابلیت Keep-Alive غیرفعال شود

Syntax:	send_timeout time;
Default:	send_timeout 60s;
Context:	http, server, location
اگر کلاینت برای مدتی هیچ داده‌ای از سرور دریافت نکنه، ارتباط قطع بشه 
بیشتر در زمان نوشتن(whrite)

Syntax:	client_body_timeout time;
Default:	client_body_timeout 60s;
Context:	http, server, location
between two successive read 
 سرور چقدر منتظر بماند تا کل بادی درخواست کلاینت دریافت شود.

sample code:
-----------------
# main context
user sss;
events {}
http {
		keepalive_min_timeout 20s 18s;
		keepalive_requests 20;
		keepalive_disable msie6;
		send_timeout 60s;
		client_body_timeout 30s;

		upstream backends {
			server 127.0.0.1:82;
		}
		server {
			server_name 127.0.0.1;
			listen 81;
			location / {
				proxy_pass http://backends;

			}
		}	

		server {
			server_name 127.0.0.1;
			listen 82;
			root /home/sss/Desktop/nginx/blog/one;
		}	
	
}

------------------------------------------------------------
d3 r1
section_16

rewrite

if (condition){ operations }

Syntax:	return code [text];
		return code URL;
		return URL;
Default:	—
Context:	server, location, if

Syntax:	rewrite regex replacement [flag];
Default:	—
Context:	server, location, if
flags= last, break
301, 302
 از آن برای ریدایرکت کردن مسیرها، حذف پسوندها، یا هدایت کاربران به مسیر جدید استفاده می‌شود.

Syntax:	rewrite_log on | off;
Default:	rewrite_log off;
Context:	http, server, location, if
notice level

sample code:
-----------------
# main context
user sss;
events {}
http {
		server {
			server_name 127.0.0.1;
			listen 81;
			return 301 $scheme://www.domain.com$request_uri
			root /home/sss/Desktop/nginx/blog/one;

			# rewrite ^/first$ /two;

			# location / {
			# 		# if ($request_method = POST){
			# 		# 	return 405 "method is not allowed";
			# 		# }
			# 		# return 200 "Hello";
			# 		# return 302 http://www.google.com;
			# 		# return 301 /two;
			# 		# rewrite ^/first$ /two;
			# 		# rewrite ^/first$/(.*)$/(.*)$/ /two/$1/$2;
			# }

			location /first {
					rewrite ^/first$/(.*)$ /blog/$1;
			}
			
			location /two {
				root /home/sss/Desktop/nginx/blog;
			}
			
			location /blog {
				root /home/sss/Desktop/nginx;
			}
		}	
	
}

------------------------------------------------------------
d3 r1
section_17

worker_connections
 هر worker process حداکثر چند اتصال (connection) هم‌زمان می‌تونه مدیریت کنه.
in terminl: ulimit -n

accept_mutext on/off;

مشخص می‌کند که worker processها چگونه به اتصالات جدید (new connections) پاسخ بدهند.

daemon on/off;
 آیا Nginx به‌صورت دایمون (Background Process) اجرا شود یا نه.



worker_rlimit_nofile number;
 برای تعیین حداکثر تعداد فایل‌هایی است که هر فرآیند worker می‌تواند باز کند.

Syntax:	limit_except method ... { ... }
Default:	—
Context:	location
برای محدود کردن نوع‌های خاصی از درخواست‌های HTTP (مثل POST, PUT, DELETE, ...) استفاده می‌شود

sample code 
-----------------
# main context
user sss;
events {}
http {
		server {
			server_name 127.0.0.1;
			listen 81;
			root /home/sss/Desktop/nginx/blog/one;

			location / {
					limit_except POST {
					deny  all;
}
			}
		}	
}
